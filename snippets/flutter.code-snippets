{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //  "scope": "javascript,typescript",
  //  "prefix": "log",
  //  "body": [
  //      "console.log('$1');",
  //      "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "Import package": {
    "prefix": "kImp",
    "body": ["import 'package:$0';"]
  },
  "Import package same file": {
    "prefix": "kImpFile",
    "body": ["import 'package:$0/$0.dart';"]
  },
  "Register bloc event": {
    "prefix": "kOn",
    "body": ["on<$0>(_on$0);"]
  },
  "GetIt AppRepository": {
    "prefix": "kGetItAppRepo",
    "body": ["getIt.get<AppRepository>().$0;"]
  },
  "Build list methods for model from json": {
    "prefix": "kBuildListFromResponse",
    "body": [
      "List<$0> build$0ListFromResponse(",
      "  String response,",
      ") {",
      "  return (json.decode(response) as List<dynamic>)",
      "\t  .map(",
      "\t\t(json) => $0.fromJson(json as Map<String, dynamic>),",
      "\t  )",
      "\t  .toList();",
      "}"
    ]
  },

  // files
  "Image Picker and Cropper Utils": {
    "prefix": "kImagePickerUtil",
    "body": [
      "import 'dart:io';",
      "",
      "import 'package:image_cropper/image_cropper.dart';",
      "import 'package:image_picker/image_picker.dart';",
      "",
      "class ImageConstant {",
      "  static const double avatarRatio = 1;",
      "  static const int quality = 60;",
      "}",
      "",
      "class ImagePickerHelper {",
      "  const ImagePickerHelper._();",
      "",
      "  static final ImagePicker _imagePicker = ImagePicker();",
      "  static final ImageCropper _imageCropper = ImageCropper();",
      "",
      "  static Future<File?> pickImage(ImageSource imageSource) async {",
      "\tfinal pickedImage = await _imagePicker.pickImage(",
      "\t  source: imageSource,",
      "\t  preferredCameraDevice: CameraDevice.front,",
      "\t);",
      "\tif (pickedImage != null) {",
      "\t  final croppedFilePath = await _cropImage(pickedImage.path);",
      "\t  if (croppedFilePath != null) {",
      "\t\treturn File(croppedFilePath);",
      "\t  }",
      "\t}",
      "\treturn null;",
      "  }",
      "",
      "  static Future<String?> _cropImage(String imagePath) async {",
      "\tfinal croppedFile = await _imageCropper.cropImage(",
      "\t  sourcePath: imagePath,",
      "\t  aspectRatio: const CropAspectRatio(",
      "\t\tratioX: ImageConstant.avatarRatio,",
      "\t\tratioY: ImageConstant.avatarRatio,",
      "\t  ),",
      "\t  aspectRatioPresets: [",
      "\t\tCropAspectRatioPreset.square,",
      "\t  ],",
      "\t  compressQuality: ImageConstant.quality,",
      "\t  compressFormat: imagePath.endsWith('.png')",
      "\t\t  ? ImageCompressFormat.png",
      "\t\t  : ImageCompressFormat.jpg,",
      "\t  uiSettings: [",
      "\t\tAndroidUiSettings(",
      "\t\t  toolbarTitle: 'Crop image',",
      "\t\t  cropFrameStrokeWidth: 0,",
      "\t\t  showCropGrid: false,",
      "\t\t  hideBottomControls: false,",
      "\t\t  lockAspectRatio: true,",
      "\t\t  initAspectRatio: CropAspectRatioPreset.square,",
      "\t\t),",
      "\t\tIOSUiSettings(",
      "\t\t  hidesNavigationBar: false,",
      "\t\t  aspectRatioLockEnabled: true,",
      "\t\t  resetButtonHidden: true,",
      "\t\t)",
      "\t  ],",
      "\t);",
      "\treturn croppedFile?.path;",
      "  }",
      "}",
      "",
      "Future<File?> showImagePicker(BuildContext context) async {",
      "  return await showCustomBottomSheet(",
      "\tcontext: context,",
      "\tchildren: [",
      "\t  ListTile(",
      "\t\tleading: const Icon(",
      "\t\t  CupertinoIcons.photo,",
      "\t\t),",
      "\t\ttitle: const Text('Select from gallery'),",
      "\t\tonTap: () async {",
      "\t\t  final imageFile =",
      "\t\t\t  await ImagePickerHelper.pickImage(ImageSource.gallery);",
      "\t\t  return Navigator.of(context).pop(imageFile);",
      "\t\t},",
      "\t  ),",
      "\t  ListTile(",
      "\t\tleading: const Icon(",
      "\t\t  CupertinoIcons.photo_camera,",
      "\t\t),",
      "\t\ttitle: const Text('Capture'),",
      "\t\tonTap: () async {",
      "\t\t  final imageFile =",
      "\t\t\t  await ImagePickerHelper.pickImage(ImageSource.camera);",
      "\t\t  return Navigator.of(context).pop(imageFile);",
      "\t\t},",
      "\t  ),",
      "\t],",
      "  ) as File?;",
      "}",
      ""
    ]
  },
  "Bottom Sheet": {
    "prefix": "kBottomSheetFile",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "Future<void> showCustomBottomSheet({",
      "  required List<Widget> children,",
      "  required BuildContext context,",
      "}) {",
      "  final theme = Theme.of(context);",
      "  final size = MediaQuery.of(context).size;",
      "  return showModalBottomSheet(",
      "\tcontext: context,",
      "\tbarrierColor: Colors.transparent,",
      "\tbackgroundColor: Colors.transparent,",
      "\tbuilder: (context) {",
      "\t  return SafeArea(",
      "\t\tchild: DecoratedBox(",
      "\t\t  decoration: BoxDecoration(",
      "\t\t\tcolor: theme.scaffoldBackgroundColor,",
      "\t\t\tborderRadius: BorderRadius.circular(16),",
      "\t\t\tboxShadow: const <BoxShadow>[",
      "\t\t\t  BoxShadow(",
      "\t\t\t\tcolor: Colors.black12,",
      "\t\t\t\tblurRadius: 10,",
      "\t\t\t\tspreadRadius: 2,",
      "\t\t\t\toffset: Offset(0, 2),",
      "\t\t\t  ),",
      "\t\t\t],",
      "\t\t  ),",
      "\t\t  child: Column(",
      "\t\t\tmainAxisSize: MainAxisSize.min,",
      "\t\t\tchildren: [",
      "\t\t\t  Row(",
      "\t\t\t\tchildren: [",
      "\t\t\t\t  SizedBox(",
      "\t\t\t\t\twidth: size.width * .45,",
      "\t\t\t\t  ),",
      "\t\t\t\t  Container(",
      "\t\t\t\t\theight: 6,",
      "\t\t\t\t\twidth: size.width * .15,",
      "\t\t\t\t\tdecoration: BoxDecoration(",
      "\t\t\t\t\t  borderRadius: BorderRadius.circular(10),",
      "\t\t\t\t\t  color: theme.dividerColor,",
      "\t\t\t\t\t),",
      "\t\t\t\t  ),",
      "\t\t\t\t  const Spacer(),",
      "\t\t\t\t  TextButton(",
      "\t\t\t\t\tonPressed: () {",
      "\t\t\t\t\t  Navigator.of(context).pop();",
      "\t\t\t\t\t},",
      "\t\t\t\t\tchild: const Text('Close'),",
      "\t\t\t\t  ),",
      "\t\t\t\t],",
      "\t\t\t  ),",
      "\t\t\t  Padding(",
      "\t\t\t\tpadding: const EdgeInsets.only(",
      "\t\t\t\t  left: 12,",
      "\t\t\t\t  right: 12,",
      "\t\t\t\t  bottom: 12,",
      "\t\t\t\t),",
      "\t\t\t\tchild: Column(",
      "\t\t\t\t  mainAxisSize: MainAxisSize.min,",
      "\t\t\t\t  children: children,",
      "\t\t\t\t),",
      "\t\t\t  ),",
      "\t\t\t],",
      "\t\t  ),",
      "\t\t),",
      "\t  );",
      "\t},",
      "  );",
      "}",
      ""
    ]
  }
}
